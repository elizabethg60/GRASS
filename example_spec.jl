# using Pkg; Pkg.activate(".")
using GRASS
using Printf
using Revise
using SPICE
using Statistics
using EchelleCCFs
using BenchmarkTools

GRASS.get_kernels()

neid_timestamps = ["2023-10-14T15:26:45", "2023-10-14T15:28:07", "2023-10-14T15:29:30", "2023-10-14T15:30:53", "2023-10-14T15:32:15", "2023-10-14T15:33:38", "2023-10-14T15:35:01", "2023-10-14T15:36:23", "2023-10-14T15:37:46", "2023-10-14T15:39:09", "2023-10-14T15:40:31", "2023-10-14T15:41:54", "2023-10-14T15:43:17", "2023-10-14T15:44:39", "2023-10-14T15:46:02", "2023-10-14T15:47:25", "2023-10-14T15:48:47", "2023-10-14T15:50:10", "2023-10-14T15:51:33", "2023-10-14T15:52:56", "2023-10-14T15:54:18", "2023-10-14T15:55:41", "2023-10-14T15:57:04", "2023-10-14T15:58:26", "2023-10-14T15:59:49", "2023-10-14T16:01:12", "2023-10-14T16:02:34", "2023-10-14T16:03:57", "2023-10-14T16:05:20", "2023-10-14T16:06:42", "2023-10-14T16:08:05", "2023-10-14T16:09:28", "2023-10-14T16:10:50", "2023-10-14T16:12:13", "2023-10-14T16:13:36", "2023-10-14T16:14:58", "2023-10-14T16:16:21", "2023-10-14T16:17:44", "2023-10-14T16:19:06", "2023-10-14T16:20:29", "2023-10-14T16:21:52", "2023-10-14T16:23:15", "2023-10-14T16:24:37", "2023-10-14T16:26:00", "2023-10-14T16:27:23", "2023-10-14T16:28:45", "2023-10-14T16:30:08", "2023-10-14T16:31:31", "2023-10-14T16:32:53", "2023-10-14T16:34:16", "2023-10-14T16:35:39", "2023-10-14T16:37:01", "2023-10-14T16:38:24", "2023-10-14T16:39:47", "2023-10-14T16:41:09", "2023-10-14T16:42:32", "2023-10-14T16:43:55", "2023-10-14T16:45:17", "2023-10-14T16:46:40", "2023-10-14T16:48:03", "2023-10-14T16:49:25", "2023-10-14T16:50:48", "2023-10-14T16:52:11", "2023-10-14T16:53:33", "2023-10-14T16:54:56", "2023-10-14T16:56:19", "2023-10-14T16:57:42", "2023-10-14T16:59:04", "2023-10-14T17:00:27", "2023-10-14T17:01:50", "2023-10-14T17:03:12", "2023-10-14T17:04:35", "2023-10-14T17:05:58", "2023-10-14T17:07:20", "2023-10-14T17:08:43", "2023-10-14T17:10:06", "2023-10-14T17:11:28", "2023-10-14T17:12:51", "2023-10-14T17:14:14", "2023-10-14T17:15:36", "2023-10-14T17:16:59", "2023-10-14T17:18:22", "2023-10-14T17:19:44", "2023-10-14T17:21:07", "2023-10-14T17:22:30", "2023-10-14T17:23:52", "2023-10-14T17:25:15", "2023-10-14T17:26:38", "2023-10-14T17:28:01", "2023-10-14T17:29:23", "2023-10-14T17:30:46", "2023-10-14T17:32:09", "2023-10-14T17:33:31", "2023-10-14T17:34:54", "2023-10-14T17:36:17", "2023-10-14T17:37:39", "2023-10-14T17:39:02", "2023-10-14T17:40:25", "2023-10-14T17:41:47", "2023-10-14T17:43:10", "2023-10-14T17:44:33", "2023-10-14T17:45:55", "2023-10-14T17:47:18", "2023-10-14T17:48:41", "2023-10-14T17:50:03", "2023-10-14T17:51:26", "2023-10-14T17:52:49", "2023-10-14T17:54:11", "2023-10-14T17:55:34", "2023-10-14T17:56:57", "2023-10-14T17:58:20", "2023-10-14T17:59:42", "2023-10-14T18:01:05", "2023-10-14T18:02:28", "2023-10-14T18:03:50", "2023-10-14T18:05:13", "2023-10-14T18:06:36", "2023-10-14T18:07:58", "2023-10-14T18:09:21", "2023-10-14T18:10:44", "2023-10-14T18:12:06", "2023-10-14T18:13:29", "2023-10-14T18:14:52", "2023-10-14T18:16:14", "2023-10-14T18:17:37", "2023-10-14T18:19:00", "2023-10-14T18:20:22", "2023-10-14T18:21:45", "2023-10-14T18:23:08", "2023-10-14T18:24:30", "2023-10-14T18:25:53", "2023-10-14T18:27:16", "2023-10-14T18:28:38", "2023-10-14T18:30:01", "2023-10-14T18:31:24", "2023-10-14T18:32:47", "2023-10-14T18:34:09", "2023-10-14T18:35:32", "2023-10-14T18:36:55", "2023-10-14T18:38:17", "2023-10-14T18:39:40", "2023-10-14T18:41:03", "2023-10-14T18:42:25", "2023-10-14T18:43:48", "2023-10-14T18:45:11", "2023-10-14T18:46:33", "2023-10-14T18:47:56", "2023-10-14T18:49:19", "2023-10-14T18:50:41", "2023-10-14T18:52:04", "2023-10-14T18:53:27", "2023-10-14T18:54:49", "2023-10-14T18:56:12", "2023-10-14T18:57:35", "2023-10-14T18:58:57", "2023-10-14T19:00:20", "2023-10-14T19:01:43", "2023-10-14T19:03:06"]
#convert from utc to et as needed by SPICE
time_stamps = utc2et.(neid_timestamps)

#NEID location
obs_lat = 31.9583 
obs_long = -111.5967  
alt = 2.097938 

# set up paramaters for disk
N = 50
Nt = length(time_stamps)

# set up parameters for spectrum
lines = [5250.6] # array of line centers
depths = [0.6]   # array of line depths
templates = ["FeI_5250.6"] # template data to use
variability = trues(length(lines))  # whether or not the bisectors should "dance"
blueshifts = zeros(length(lines))   # set convective blueshift value
resolution = 7e5                    # spectral resolution

# make the disk and spec composite type instances
disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)
spec = GRASS.SpecParams(lines=lines, depths=depths, variability=variability,
                   blueshifts=blueshifts, templates=templates, resolution=resolution)  

# actually synthesize the spectra
println(">>> Synthesizing on CPU...")
tstart = time()
lambdas_cpu, outspec_cpu = GRASS.synthesize_spectra_eclipse(spec, disk, obs_long, obs_lat, alt, time_stamps, verbose=true, use_gpu=false)
tstop = time()
@printf(">>> Synthesis time --> %.3f seconds \n", tstop - tstart)

#measure velocities
v_grid_cpu, ccf_cpu = GRASS.calc_ccf(lambdas_cpu, outspec_cpu, spec)
rvs_cpu, sigs_cpu = GRASS.calc_rvs_from_ccf(v_grid_cpu, ccf_cpu)